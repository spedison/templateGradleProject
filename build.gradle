/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * To learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.6/samples
 */

// This is a comment a code with one line and ....
/* This a mult line comment....
*/


// This file has copied from https://raw.githubusercontent.com/spedison/SimpleHelloJavaFXWIthGradle/main/build.gradle

// This is a plugins region
// Plugins are simple codes then is anexed in your principal program to easy your work with any task
// Here we use 2 plugins (there are many plugins) ...
// The first make a java application, make a package to distribuition, and so one.
// The second plugin execute JavaFX application.
plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
}

// Force use JDK 21 to use.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Compile with all options of JDK 21.
compileJava {
    options.release = 21
}

// This is a Group (name reference of organization or project) of My Program and o number of version
group = 'br.com.spedison'
version = '1.0-SNAPSHOT'

// Repository is big space with codes to solve many problems.
// Read PDFs, process CSVs, execute calculus with matrices, register logs, and so one.
repositories {
    mavenCentral()
}

// This Snippet code get name of SOM and put it platform variable.
def currentOS = org.gradle.internal.os.OperatingSystem.current()
def platform
if (currentOS.isWindows()) {
    platform = 'win'
} else if (currentOS.isLinux()) {
    platform = 'linux'
} else if (currentOS.isMacOsX()) {
    platform = 'mac'
}

// Configure JavaFX plugin and set version and used modules. 
// We are used only controls module, but add more javafx modules.
javafx {
    version = "20"
    modules = ['javafx.controls']
}

// Add all dependeces (libraries and files) used by project
// In this case, used javafx, java commons and test unit library
// All itens makerd with implementation will be added to package to distribution. (Zip or Tar)
dependencies {
    implementation "org.openjfx:javafx-base:22:${platform}"
    implementation "org.openjfx:javafx-graphics:22:${platform}"
    implementation "org.openjfx:javafx-controls:22:${platform}"
    implementation "org.openjfx:javafx-fxml:22:${platform}"
    implementation "org.apache.commons:commons-lang3:3.3.2"
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Configure test in application plugin
test {
    useJUnitPlatform()
}

// Define caracteristics of application, for exemple: mainClass used.
application {
    mainClass = "br.com.spedison.Main"
}

// Easy configuration for working with modules
java {
    modularity.inferModulePath.set(true)
}

// At the end, configure jar action in application plugin.
// We are settings Main class writed in Manifest file for package.
jar {
    manifest {
        attributes(
                "Main-Class": application.mainClass
        )
    }
}

/**
 * In this configuration you can:
 * gradle run ( to execute program )
 * gradle jar ( to create jar without dependences )
 * gradle distZip ( this command create one Zip with 
 * program and all depencences, but it is not configured to only run with java -jar...
 * Becase this, you can run this project with .sh ot .bat file in package.
 * The destination machine must have a JVM besides dist Zip package.
 *
 */



/** 
 *
 * If you need add all packages in a one uniq jar (called fat jar) 
 * you can used  https://www.baeldung.com/gradle-fat-jar
 *  With plugin called Shadow : https://github.com/johnrengelman/shadow
 *
 */


/**
 * Exemple of task for run command in gradle file
 * for run this command, call : 
 *                       * gradle executeHello 
 *                       * or .. gradle eH
 * for use it: 
 *       -  uncomment this code snippet 
 *       -  ajust values in commandLine(... 
 *       -  save this file
 *       -  call gradle executeHello
 * You can too rename this task name or use for execute many other actions or change the dependences.
 */

/*
task executeHello(type: Exec) {

    // Before execute this task, will be executed task compileJava.
    dependsOn(compileJava)
    
    // Execute if task is called.
    doFirst {

        // Exemple for read variables of enviroment.
        String javaExecutable = System.getenv("JAVA_HOME") + "/bin/java"
        String javaFXHome = System.getenv("JAVAFX_HOME")
        String localWorkDir = buildDir
        workingDir localWorkDir
        // And print it.
        Map<String, String> env = System.getenv();
        for (String envName : env.keySet()) {
            println((new Date()).toString() + " - Vari√°vel [" + envName + "] = [" + env.get(envName) + "]");
        }
        
        // Execute command line for JavaFX example.
        // You can call any other program with the all paramaters.
        commandLine(javaExecutable, "-cp", "./classes/java/main",
                "--module-path", javaFXHome,
                "--add-modules", "javafx.controls",
                "br.com.spedison.apps.MainJanelaHelloWord2")
        standardOutput = new ByteArrayOutputStream()
        // Execute and 
        ext.ouput = {
            // Read output of program and print it in console.
            println("workin dir = [" + workingDir + "]")
            println((new Date()).toString() + " - Java Executable Home = [" + System.getenv("JAVA_HOME") + "/bin/java" + "]")
            return standardOutput.toString()
        }
    }
}
*/

// Added example task to uncompresse ziped to test package.
// To execute this in 2 steps.
// ** 1) gradle distZip
// ** 2) gradle unzip
// ** 3) Go to buildDir/unpacked/unziped/
// ** 4) In Linux
//           ./<<project name-VERSION>>/bin/<<project name>>
//       In Windows
//           ./<<project name-VERSION>>/bin/<<project name>>.bat
task unzip(type: Copy) {
    def zipFile = file("${buildDir}/distributions/${project.name}-${version}.zip")
    def outputDir = file("${buildDir}/unpacked/unziped")

    from zipTree(zipFile)
    into outputDir
}

/* 
 *  END OF FILE ;-) Have Good Fun
 */


